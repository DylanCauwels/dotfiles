#!/usr/bin/env bash
#
# ZSH ENV
#
# Defines Zshell environment.
# 
# There are five startup files that zsh will read commands from:
#   * $ZDOTDIR/.zshenv
#   * $ZDOTDIR/.zprofile
#   * $ZDOTDIR/.zshrc
#   * $ZDOTDIR/.zlogin
#   * $ZDOTDIR/.zlogout
# 
# If ZDOTDIR is not set, then the value of HOME is used; this is the usual case.
# `.zshenv' is sourced on all invocations of the shell, unless the -f option is set. 
# It should contain commands to set the command search path, 
# plus other important environment variables. 
# `.zshenv' should not contain commands that produce output 
# or assume the shell is attached to a tty.
# 
# `.zshrc' is sourced in interactive shells. It should contain commands 
# to set up aliases, functions, options, key bindings, etc.
# 
# `.zlogin' is sourced in login shells. It should contain commands that 
# should be executed only in login shells. `.zlogout' is sourced when 
# login shells exit. `.zprofile' is similar to `.zlogin', except that 
# it is sourced before `.zshrc'. `.zprofile' is meant as an alternative 
# to `.zlogin' for ksh fans; the two are not intended to be used together, 
# although this could certainly be done if desired.
# 
# `.zlogin' is not the place for alias definitions, options, 
# environment variable settings, etc.; as a general rule, it should not 
# change the shell environment at all. Rather, it should be used to 
# set the terminal type and run a series of external commands (fortune, msgs, etc).
# 
# See table below for processing information.
# 
# Zsh executes A, then B, then C, etc. 
# +----------------+-----------+-----------+------+
# |                |Interactive|Interactive|Script|
# |                |login      |non-login  |      |
# +----------------+-----------+-----------+------+
# |/etc/zshenv     |    A      |    A      |  A   |
# +----------------+-----------+-----------+------+
# |~/.zshenv       |    B      |    B      |  B   |
# +----------------+-----------+-----------+------+
# |/etc/zprofile   |    C      |           |      |
# +----------------+-----------+-----------+------+
# |~/.zprofile     |    D      |           |      |
# +----------------+-----------+-----------+------+
# |/etc/zshrc      |    E      |    C      |      |
# +----------------+-----------+-----------+------+
# |~/.zshrc        |    F      |    D      |      |
# +----------------+-----------+-----------+------+
# |/etc/zlogin     |    G      |           |      |
# +----------------+-----------+-----------+------+
# |~/.zlogin       |    H      |           |      |
# +----------------+-----------+-----------+------+
# +----------------+-----------+-----------+------+
# |~/.zlogout      |    I      |           |      |
# +----------------+-----------+-----------+------+
# |/etc/zlogout    |    J      |           |      |
# +----------------+-----------+-----------+------+
# 
# Moral: Put stuff in `~/.zshenv`, which is always executed.
# 
# Use the Conditional Sections as needed:
#   1. SCRIPT / NON-INTERACTIVE / .zshenv
#   2. INTERACTIVE / PROMPT / .zshrc
#   3. LOGIN / .zprofile / .zlogin
#   4. NON-LOGIN / .zprofile
#
# NOTE: This is different from how Bash is processed (see `~/.bashrc`).

#-----------------------------------------------------------------------
# Ensure that non-login/non-interactive shell has a defined environment.
#-----------------------------------------------------------------------

if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprofile"
fi

#-----------------------------------------------------------------------
# Load `.env` a.k.a. `~/.dotfiles/shell/env.symlink`
#-----------------------------------------------------------------------
# This file should be loaded first in all shell environments,
# in the following files; `~/.bashrc` and `~/.zshenv`

# . ~/.env
[[ -f "${ZDOTDIR:-$HOME}/.env" ]] && source "${ZDOTDIR:-$HOME}/.env"


########################################################################
########################################################################
##
##  GENERAL CONFIGURATION
##  (stuff that you always want executed)
##
########################################################################
########################################################################

# autoload every function:
# for file in ~/.dotfiles/functions/{extract,link_file}; do
# for file in $(find -H "$DOTFILES/functions" -maxdepth 2 -name '[A-Za-z0-9\-\_]*'); do
#     [ -r "$file" ] && [ -f "$file" ] && source "$file"
# done
# unset file

fpath=($DOTFILES/functions $fpath)
autoload +X sh_alert sh_error sh_fail sh_info sh_note sh_success sh_text sh_user sh_yesno

# PATH="$PATH:$DOTFILES/functions"
# fpath="$DOTFILES/functions:$fpath"

# for d in $fpath; do
#     autoload `ls $d`
# done

# autoload `ls "$DOTFILES/functions"`

# source "$DOTFILES/zsh/fpath.zsh"
# source "$DOTFILES/zsh/config.zsh"


#-----------------------------------------------------------------------
# PATHS
#-----------------------------------------------------------------------

# Set the the list of directories that cd searches.
# cdpath=(
#     $cdpath
# )

# Set the list of directories that Zsh searches for programs.
# path=(
#     /usr/local/{bin,sbin}
#     $path
# )

# Ensure path arrays do not contain duplicates.
# typeset -gU cdpath fpath mailpath path

#-----------------------------------------------------------------------
# Temporary Files
#-----------------------------------------------------------------------

if [[ ! -d "$TMPDIR" ]]; then
    export TMPDIR="/tmp/$LOGNAME"
    mkdir -p -m 700 "$TMPDIR"
fi

TMPPREFIX="${TMPDIR%/}/zsh"


########################################################################
##  THE END: GENERAL CONFIGURATION
########################################################################


########################################################################
########################################################################
##
##  1. SCRIPT / NON-INTERACTIVE / .zshenv
##
##  Only for NON-interactive shells (ie; scripts)
##  Put your script-only stuff here, otherwise
##  this section can be ignored.
## 
########################################################################
if [[ "$SHLVL" -eq 1 && ! -o LOGIN ]]; then
: ######################################################################
# echo "$SHELL"



########################################################################
########################################################################
##
##  2. INTERACTIVE / PROMPT / .zshrc
##
##  This is executed only for interactive shells.
##  If you have a command-prompt, this conditional was met.
##  Put stuff here for prompt-based users only.
##
########################################################################
else
: ######################################################################
# echo "$SHELL::interactive"

#-----------------------------------------------------------------------
# Source/init Prezto.
#-----------------------------------------------------------------------

[[ -f "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]] && source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

# Unalias `nocorrect` completions from: prezto/modules/utility/init.zsh
#unalias mkdir mv mysql rm

#-----------------------------------------------------------------------
# PROMPT OPTIONS
#-----------------------------------------------------------------------

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
[[ -f "${ZDOTDIR:-$HOME}/.localrc" ]] && source ${ZDOTDIR:-$HOME}/.localrc

#-----------------------------------------------------------------------
# ALIASES
#-----------------------------------------------------------------------
# Aliases should only be available to prompt-user (not scripts).

alias reload!='. ~/.zshenv'

typeset -U config_files
config_files=($DOTFILES/**/*.zsh)

# load everything but the path and completion files:
# for file in ~/.dotfiles/{git,system}/{aliases,*}.zsh; do
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
    source $file
done

unset config_files

# `~/.aliases` can be used for private aliases.
[[ -f "${ZDOTDIR:-$HOME}/.aliases" ]] && source ${ZDOTDIR:-$HOME}/.aliases

# http://apt-browse.org/browse/debian/wheezy/main/all/command-not-found/
[[ -f "/etc/zsh_command_not_found" ]] && source /etc/zsh_command_not_found

#-----------------------------------------------------------------------
# TAB COMPLETION
#-----------------------------------------------------------------------

# Disable autocorrect guesses. Happens when typing a wrong
# command that may look like an existing one.
unsetopt CORRECT

# This bunch of code displays red dots when autocompleting
# a command with the tab key, "Oh-my-zsh"-style.
expand-or-complete-with-dots() {
    echo -n "\e[31m......\e[0m"
    zle expand-or-complete
    zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# Homebrew-Zsh help reset
if type "brew" &> /dev/null && [ -f "$(brew --prefix)/share/zsh/help" ]; then
    unalias run-help
    autoload run-help
    HELPDIR="$(brew --prefix)/share/zsh/help"
fi

# load every completion after autocomplete loads:
# for file in ~/.dotfiles/{git,system}/completion.zsh; do
for file in $(find -H "$DOTFILES" -maxdepth 2 -name 'completion.zsh'); do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

# z - jump around
# https://github.com/rupa/z
# Tracks your most used directories, based on 'frecency'.
# After a short learning phase, z will take you to the most 'frecent' directory 
# that matches ALL of the regexes given on the command line, in order.
if [ -f "$HOME/z/z.sh" ]; then
    source "$HOME/z/z.sh"
elif type "brew" &> /dev/null && [ -f "$(brew --prefix)/etc/profile.d/z.sh" ]; then
    source "$(brew --prefix)/etc/profile.d/z.sh"
fi

#-----------------------------------------------------------------------
# Less - opposite of more
#-----------------------------------------------------------------------
# Less is a program similar to more (1), but which allows 
# backward movement in the file as well as forward movement. 
# Also, less does not have to read the entire input file 
# before starting, so with large input files it starts up faster 
# than text editors like vi. 
#

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
    export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi


########################################################################
########################################################################
##
##  3. LOGIN / .zprofile / .zlogin
##
##  This is executed only when it is a login shell.
##  Put your `~/.zprofile` and `~/.zlogin` stuff here.
##
########################################################################
if [[ -o LOGIN ]]; then
: ######################################################################
# echo "$SHELL::interactive-login"

printf "${ClearNewLine}${BGBlack}\n"
printf "${Cyan}SYSTEM ❯ ${UTYPE} ${UMACH} ${UARCH}\n"
printf "${Red}SHELL  ❯ $(${SHELL} --version)\n"
printf "${Yellow}USER   ❯ ${USER} @ ${HOST} (${LANG})\n"
printf "${Green}HOME   ❯ ${HOME}\n"
printf "\n\n${Reset}"


########################################################################
########################################################################
##
##  4. NON-LOGIN / .zprofile
##
##  Only when it is NOT a login shell.
##  This is the default `~/.zshrc` environment.
##  That means this can be ignored unless considerations
##  are required for NON-LOGIN USERS ONLY.
##
########################################################################
else
: ######################################################################
# echo "$SHELL::interactive-nonlogin"



########################################################################
fi #####################################################################
##
##  THE END: CONDITIONAL CONFIGURATION
##
fi #####################################################################
########################################################################

