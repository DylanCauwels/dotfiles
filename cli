#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2034
# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#    ,ad8888ba,   88           88
#   d8"'    `"8b  88           88
#  d8'            88           88
#  88             88           88
#  88             88           88
#  Y8,            88           88
#   Y8a.    .a8P  88           88
#    `"Y8888Y"'   88888888888  88
#
# ==================================================================================================
# Command-line interface for @seantrane/dotfiles
#
# See README file for more information.
# ==================================================================================================

set -o errexit # exit if a command fails
set -o pipefail # return exit status of last command
[[ ! -z "${NOUNSET:-}" ]] && set -o nounset # exit if using undeclared variable
[[ ! -z "${TRACE:-}" ]] && set -o xtrace # trace of command execution
IFS=$'\n\t' # (Internal Field Separator) better word splitting

__DIR=$( cd "${BASH_SOURCE%/*}" && pwd ) # path to script directory
__FILE="${__DIR}/$(basename "${BASH_SOURCE[0]}")" # path to script file
__BASE="$(basename "$__FILE" .sh)" # filename of script
__DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") # timestamp

# --------------------------------------------------------------------------------------------------
# CHECK/LOAD/SET SCRIPT REQUIREMENTS
# --------------------------------------------------------------------------------------------------

# if ! type "npm" &> /dev/null; then
#   echo "!!! npm is required to run this script !!!" && echo ""
#   echo "!!! Please install npm before running this script !!!" && echo ""
#   exit 1
# fi

# Shell Support
. "${__DIR}/functions/docker_clean"
. "${__DIR}/functions/run_or_fail"
. "${__DIR}/functions/sh_alert"
. "${__DIR}/functions/sh_code"
. "${__DIR}/functions/sh_error"
. "${__DIR}/functions/sh_fail"
. "${__DIR}/functions/sh_heading"
. "${__DIR}/functions/sh_info"
. "${__DIR}/functions/sh_msg"
. "${__DIR}/functions/sh_note"
. "${__DIR}/functions/sh_success"
. "${__DIR}/functions/sh_user"

# Start script timer
start=$(date +%s)

echo "CLI script started (${__DATE})"

# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888888  888b      88  8b           d8
#  88           8888b     88  `8b         d8'
#  88           88 `8b    88   `8b       d8'
#  88aaaaa      88  `8b   88    `8b     d8'
#  88"""""      88   `8b  88     `8b   d8'
#  88           88    `8b 88      `8b d8'
#  88           88     `8888       `888'
#  88888888888  88      `888        `8'
#
# --------------------------------------------------------------------------------------------------
# TOGGLES / SPECIAL VARIABLES GO HERE:
# --------------------------------------------------------------------------------------------------

TEMP_PATH="${__DIR}/temp"
TEMP_BUILD_PATH="${TEMP_PATH}/build"

# Get environment variables from `.env` file, if available.
DOTENV_PATH="${__DIR}/.env"
[[ -e "$DOTENV_PATH" ]] && {
  echo "Loading \`.env\` variables"
  DOTENV_SHELL_LOADER_SAVED_OPTS=$(set +o)
  set -o allexport
  # shellcheck disable=SC1090,SC1091
  [[ -f "$DOTENV_PATH" ]] && . "$DOTENV_PATH"
  set +o allexport
  eval "$DOTENV_SHELL_LOADER_SAVED_OPTS"
  unset DOTENV_SHELL_LOADER_SAVED_OPTS
}

# Get private variables/credentials from `.localrc` file, if available.
DOTLOCALRC_PATH="${__DIR}/.localrc"
[[ -e "$DOTLOCALRC_PATH" ]] && {
  echo "Loading \`.localrc\` variables"
  DOTENV_SHELL_LOADER_SAVED_OPTS=$(set +o)
  set -o allexport
  # shellcheck disable=SC1090,SC1091
  [[ -f "$DOTLOCALRC_PATH" ]] && . "$DOTLOCALRC_PATH"
  set +o allexport
  eval "$DOTENV_SHELL_LOADER_SAVED_OPTS"
  unset DOTENV_SHELL_LOADER_SAVED_OPTS
}

# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88        88  88888888888  88           88888888ba
#  88        88  88           88           88      "8b
#  88        88  88           88           88      ,8P
#  88aaaaaaaa88  88aaaaa      88           88aaaaaa8P'
#  88""""""""88  88"""""      88           88""""""'
#  88        88  88           88           88
#  88        88  88           88           88
#  88        88  88888888888  88888888888  88
#
# --------------------------------------------------------------------------------------------------
# HELP DOCS GO HERE:
# --------------------------------------------------------------------------------------------------

CLI_HELP_DOC="
  CLI

  Usage:

    ./cli [--option]

    bash ./cli [--option]

    ./cli -h | --help

    # Debug the script

    ./cli --debug --clean

  Options:

    --debug             Turn on debug mode

    --clean             Clean existing application build/test files

    -lint               Run linters

    -t, --test          Run unit/integration/mock tests

    --report            Run scanner/reporting

    -s, --start         Start the application

    -s, --stop          Stop the application

    -p, --publish       Publish the application

    -h, --help          CLI HELP
"

# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#         db         88888888ba     ,ad8888ba,    ad88888ba
#        d88b        88      "8b   d8"'    `"8b  d8"     "8b
#       d8'`8b       88      ,8P  d8'            Y8,
#      d8'  `8b      88aaaaaa8P'  88             `Y8aaaaa,
#     d8YaaaaY8b     88""""88'    88      88888    `"""""8b,
#    d8""""""""8b    88    `8b    Y8,        88          `8b
#   d8'        `8b   88     `8b    Y8a.    .a88  Y8a     a8P
#  d8'          `8b  88      `8b    `"Y88888P"    "Y88888P"
#
# --------------------------------------------------------------------------------------------------
echo "Loading arguments"
# --------------------------------------------------------------------------------------------------
# Arguments are sorted in the order they are played in the script
# --------------------------------------------------------------------------------------------------

RUN_DEBUG=false
RUN_CLEAN=false
RUN_LINT=false
RUN_TEST=false
RUN_REPORT=false
RUN_START=false
RUN_STOP=false
RUN_PUBLISH=false

for ARG in "$@"; do
  case "$ARG" in
    --help)
      echo "${CLI_HELP_DOC}"
      exit
      ;;
    -h)
      echo "${CLI_HELP_DOC}"
      exit
      ;;
    --debug)
      RUN_DEBUG=true
      ;;
    --clean)
      RUN_CLEAN=true
      ;;
    --lint)
      RUN_LINT=true
      ;;
    --test)
      RUN_TEST=true
      ;;
    -t)
      RUN_TEST=true
      ;;
    --report)
      RUN_REPORT=true
      ;;
    --start)
      RUN_START=true
      ;;
    -s)
      RUN_START=true
      ;;
    --stop)
      RUN_STOP=true
      ;;
    --publish)
      RUN_PUBLISH=true
      ;;
    -p)
      RUN_PUBLISH=true
      ;;

    # ==============================================================================================
    # ADDITIONAL ARGUMENTS GO HERE
    # ==============================================================================================

    --egg)
      echo "The egg hatched."
      echo "${__DATE}"
      ;;

    # ----------------------------------------------------------------------------------------------
    # LEGEND:
    # ----------------------------------------------------------------------------------------------
    # Flag-based:
    # --flag)
    #   FLAG=true
    #   ;;
    # -f)
    #   FLAG_SHORTHAND=true
    #   ;;
    # ----------------------------------------------------------------------------------------------
    # String-based:
    # --str=*)
    #   STR=${ARG#--str=}
    #   ;;
    # ----------------------------------------------------------------------------------------------
    # CSV-based:
    # --csv=*)
    #   CSV_STR=${ARG#--csv=}
    #   CSV=( ${CSV_STR//,/ } )
    #   ;;
    # ----------------------------------------------------------------------------------------------

    # ==============================================================================================
    # Catch-all failure for unknown arguments
    # ==============================================================================================
    *)
      echo "Unknown option $ARG."
      exit 1
      ;;
  esac
done

# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  8b           d8   db         88888888ba    ad88888ba
#  `8b         d8'  d88b        88      "8b  d8"     "8b
#   `8b       d8'  d8'`8b       88      ,8P  Y8,
#    `8b     d8'  d8'  `8b      88aaaaaa8P'  `Y8aaaaa,
#     `8b   d8'  d8YaaaaY8b     88""""88'      `"""""8b,
#      `8b d8'  d8""""""""8b    88    `8b            `8b
#       `888'  d8'        `8b   88     `8b   Y8a     a8P
#        `8'  d8'          `8b  88      `8b   "Y88888P"
#
# --------------------------------------------------------------------------------------------------
echo "Loading/setting application variables"
# --------------------------------------------------------------------------------------------------
# SHARED VARIABLES GO HERE:
# --------------------------------------------------------------------------------------------------

[[ -z "${ENV}" ]] && ENV="local"

# fail on empty/missing vars
# [[ -z "${VAR_X:-}" ]] && { echo "Missing VAR_X" && exit 1 }
# default values for empty/missing vars
# [[ -z "${VAR_X}" ]] && VAR_X="default"
# null default if var not available
# VAR_Z="${VAR_Y:-}"
# "default" if var not available
# VAR_Z="${VAR_Y:"default"}"

# group all of the variables in an array.
declare -a ENV_VARS=(
  "__DATE"
  "ENV"
)

# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#    ,ad8888ba,   88           88888888888         db         888b      88
#   d8"'    `"8b  88           88                 d88b        8888b     88
#  d8'            88           88                d8'`8b       88 `8b    88
#  88             88           88aaaaa          d8'  `8b      88  `8b   88
#  88             88           88"""""         d8YaaaaY8b     88   `8b  88
#  Y8,            88           88             d8""""""""8b    88    `8b 88
#   Y8a.    .a8P  88           88            d8'        `8b   88     `8888
#    `"Y8888Y"'   88888888888  88888888888  d8'          `8b  88      `888
#
# --------------------------------------------------------------------------------------------------
if ( $RUN_CLEAN ) && ( $RUN_DEBUG ); then echo "DEBUG MODE: CLEAN scripting bypassed"
elif ( $RUN_CLEAN ); then echo "CLEAN script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  echo "Removing all auto-generated directories"
  (
    rm -rf \
      coverage \
      doc \
      node_modules \
      "$TEMP_BUILD_PATH"
  ) < /dev/null 2> /dev/null

# --------------------------------------------------------------------------------------------------
echo "CLEAN script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88           88  888b      88  888888888888
#  88           88  8888b     88       88
#  88           88  88 `8b    88       88
#  88           88  88  `8b   88       88
#  88           88  88   `8b  88       88
#  88           88  88    `8b 88       88
#  88           88  88     `8888       88
#  88888888888  88  88      `888       88
#
# ==================================================================================================
if ( $RUN_LINT ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: Application linter bypassed"
elif ( $RUN_LINT ); then sh_heading "LINT script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  sh_info "Running markdownlint"

  run_or_fail npm run lint

  sh_info "Running linter on shell scripts"

  docker pull koalaman/shellcheck:stable
  docker run -v "$PWD:/mnt" koalaman/shellcheck \
    ./cli \
    ./script/* \
    ./**/*.bash \
    ./**/*.sh \
    ./**/*.zsh \
    || sh_fail "ShellCheck failed!"

  docker_clean koalaman/shellcheck koalaman/shellcheck:stable

# --------------------------------------------------------------------------------------------------
sh_success "LINT script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  888888888888  88888888888  ad88888ba  888888888888
#       88       88          d8"     "8b      88
#       88       88          Y8,              88
#       88       88aaaaa     `Y8aaaaa,        88
#       88       88"""""       `"""""8b,      88
#       88       88                  `8b      88
#       88       88          Y8a     a8P      88
#       88       88888888888  "Y88888P"       88
#
# ==================================================================================================
if ( $RUN_TEST ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: Unit/Integration/Mock Tests bypassed"
elif ( $RUN_TEST ); then sh_heading "TEST script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  sh_info "Running Unit/Integration/Mock Tests"

  TESTS_IMAGE="${APP_NAME}-test"
  TESTS_CONTAINER="${TESTS_IMAGE}-container"

  docker_clean "${TESTS_CONTAINER}" "${TESTS_IMAGE}:${APP_TAG}"

  # Create
  docker build -f Dockerfile.test -t "${TESTS_IMAGE}:${APP_TAG}" . && docker images
  # docker run -it -v ${PWD}:/usr/src/app --name ${TESTS_CONTAINER} --rm ${TESTS_IMAGE}:${APP_TAG}; echo $?
  docker run --name "${TESTS_CONTAINER}" -d -P "${TESTS_IMAGE}:${APP_TAG}" \
    || {
      docker_clean "${TESTS_CONTAINER}" "${TESTS_IMAGE}:${APP_TAG}"
      sh_fail "Test(s) failed!"
    }

  echo "CONTAINER_NAME: ${TESTS_CONTAINER}"
  CONTAINER_ID=$(docker ps -aqf "name=${TESTS_CONTAINER}")
  echo "CONTAINER_ID: ${CONTAINER_ID}"
  echo "Ready to run; docker cp ${CONTAINER_ID}:/usr/src/app/coverage.tgz ."
  docker cp "${CONTAINER_ID}:/usr/src/app/coverage.tgz" .

  rm -rf coverage
  tar -xzvf coverage.tgz coverage/

  docker_clean "${TESTS_CONTAINER}" "${TESTS_IMAGE}:${APP_TAG}"

# --------------------------------------------------------------------------------------------------
sh_success "TEST script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba   88888888888  88888888ba     ,ad8888ba,    88888888ba  888888888888
#  88      "8b  88           88      "8b   d8"'    `"8b   88      "8b      88
#  88      ,8P  88           88      ,8P  d8'        `8b  88      ,8P      88
#  88aaaaaa8P'  88aaaaa      88aaaaaa8P'  88          88  88aaaaaa8P'      88
#  88""""88'    88"""""      88""""""'    88          88  88""""88'        88
#  88    `8b    88           88           Y8,        ,8P  88    `8b        88
#  88     `8b   88           88            Y8a.    .a8P   88     `8b       88
#  88      `8b  88888888888  88             `"Y8888Y"'    88      `8b      88
#
# ==================================================================================================
if ( $RUN_REPORT ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: REPORT scripting bypassed"
elif ( $RUN_REPORT ); then sh_heading "REPORT script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  if [[ -z "${CODECOV_TOKEN:-}" ]]; then
    sh_alert "'CODECOV_TOKEN' variable was not found or was empty."
    sh_text "codecov.io reporting cannot be performed without 'CODECOV_TOKEN' variable set."
  else
    sh_heading "codecov.io script started"
    [[ ! -d "${__DIR}/coverage" ]] && sh_fail "'./coverage' not found."
    bash <(curl -s https://codecov.io/bash)
  fi

  if [[ -e "${__DIR}/sonar-project.properties" ]]; then
    if [[ -z "${SONAR_SCANNER_PATH:-}" ]]; then
      sh_alert "'SONAR_SCANNER_PATH' variable was not found or was empty."
      sh_text "SONAR reporting cannot be performed without 'SONAR_SCANNER_PATH' variable set."
    elif [[ -z "${SONAR_SERVER_URL:-}" ]]; then
      sh_alert "'SONAR_SERVER_URL' variable was not found or was empty."
      sh_text "SONAR reporting cannot be performed without 'SONAR_SERVER_URL' variable set."
    else
      sh_heading "SONAR script started"
      require_bin "${SONAR_SCANNER_PATH}"
      [[ ! -d "${__DIR}/coverage" ]] && sh_fail "'./coverage' not found."
      run_or_fail "$SONAR_SCANNER_PATH" -Dsonar.host.url="$SONAR_SERVER_URL"
    fi
  fi

# --------------------------------------------------------------------------------------------------
sh_success "REPORT script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#   ad88888ba  888888888888    db         88888888ba  888888888888
#  d8"     "8b      88        d88b        88      "8b      88
#  Y8,              88       d8'`8b       88      ,8P      88
#  `Y8aaaaa,        88      d8'  `8b      88aaaaaa8P'      88
#    `"""""8b,      88     d8YaaaaY8b     88""""88'        88
#          `8b      88    d8""""""""8b    88    `8b        88
#  Y8a     a8P      88   d8'        `8b   88     `8b       88
#   "Y88888P"       88  d8'          `8b  88      `8b      88
#
# ==================================================================================================
if ( $RUN_START ) &&( $RUN_DEBUG ); then echo "DEBUG MODE: START scripting bypassed"
elif ( $RUN_START ); then echo "START script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  # ...

# --------------------------------------------------------------------------------------------------
echo "START script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#   ad88888ba  888888888888  ,ad8888ba,    88888888ba
#  d8"     "8b      88      d8"'    `"8b   88      "8b
#  Y8,              88     d8'        `8b  88      ,8P
#  `Y8aaaaa,        88     88          88  88aaaaaa8P'
#    `"""""8b,      88     88          88  88""""""'
#          `8b      88     Y8,        ,8P  88
#  Y8a     a8P      88      Y8a.    .a8P   88
#   "Y88888P"       88       `"Y8888Y"'    88
#
# ==================================================================================================
if ( $RUN_STOP ) && ( $RUN_DEBUG ); then echo "DEBUG MODE: STOP scripting bypassed"
elif ( $RUN_STOP ); then echo "STOP script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  # ...

# --------------------------------------------------------------------------------------------------
echo "STOP script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  88888888ba   88        88  88888888ba   88           88   ad88888ba   88        88
#  88      "8b  88        88  88      "8b  88           88  d8"     "8b  88        88
#  88      ,8P  88        88  88      ,8P  88           88  Y8,          88        88
#  88aaaaaa8P'  88        88  88aaaaaa8P'  88           88  `Y8aaaaa,    88aaaaaaaa88
#  88""""""'    88        88  88""""""8b,  88           88    `"""""8b,  88""""""""88
#  88           88        88  88      `8b  88           88          `8b  88        88
#  88           Y8a.    .a8P  88      a8P  88           88  Y8a     a8P  88        88
#  88            `"Y8888Y"'   88888888P"   88888888888  88   "Y88888P"   88        88
#
# ==================================================================================================
if ( $RUN_PUBLISH ) && ( $RUN_DEBUG ); then sh_alert "DEBUG MODE: PUBLISH scripting bypassed"
elif ( $RUN_PUBLISH ); then sh_heading "PUBLISH script started"
# --------------------------------------------------------------------------------------------------
# SCRIPTING GOES HERE:
# --------------------------------------------------------------------------------------------------

  run_or_fail npm run semantic-release

# --------------------------------------------------------------------------------------------------
sh_success "PUBLISH script completed successfully"; fi
# **************************************************************************************************
# ==================================================================================================
# ==================================================================================================
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# ==================================================================================================
# ==================================================================================================
# **************************************************************************************************
#
#  888888888888  88        88  88888888888     88888888888  888b      88  88888888ba,
#       88       88        88  88              88           8888b     88  88      `"8b
#       88       88        88  88              88           88 `8b    88  88        `8b
#       88       88aaaaaaaa88  88aaaaa         88aaaaa      88  `8b   88  88         88
#       88       88""""""""88  88"""""         88"""""      88   `8b  88  88         88
#       88       88        88  88              88           88    `8b 88  88         8P
#       88       88        88  88              88           88     `8888  88      .a8P
#       88       88        88  88888888888     88888888888  88      `888  88888888Y"'
#
# ==================================================================================================

declare -a END_VARS=(
  "__DIR"
  "__FILE"
  "__BASE"
  "${ENV_VARS[@]}"
)
echo "{"
for var in "${END_VARS[@]}"; do
  echo "  \"${var}\": \"${!var}\""
done
echo "}"

echo "CLI script completed successfully"

end=$(date +%s)
runlen=$(echo "$end - $start" | bc)
if type "python" &> /dev/null; then
  runtime=$(python -c "print '%u:%02u' % ($runlen/60, $runlen%60)")
else
  runtime="$runlen seconds"
fi
echo "runtime: ${runtime}"
